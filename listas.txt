1) ESTRUCTURA.......................... 15
2) CREAR............................... 21
3) INSERTAR AL PRINCIPIO............... 26
4) INSERTAR AL FINAL................... 35
5) INSERTAR ORDENADO................... 52
6) BUSCAR EN LA LISTA.................. 73
7) BORRA EL PRIMERO.................... 83
8) BORRAR UN DATO...................... 93
9) BORRAR E IMPRIMIR LA LISTA.......... 112
10) ORDENAR LISTA...................... 124
11) INSERTAR SIN DUPLICADO............. 136
12) INSERTAR EN POSICION............... 146
13) LEER EN POSICION................... 167

1) ESTRUCTURA DE LA LISTA
typedef struct{
    int dato;
    struct Nodo* siguiente;
}Nodo;

2) CREAR LISTA
void crear(Nodo** lista){
    *lista = NULL;
}

3) INSERTAR AL PRINCIPIO
Nodo* insertarPrimero(Nodo** lista, int dato){
    Nodo* nodo = (Nodo*)malloc(sizeof(Nodo));
    nodo->dato = dato;
    nodo->siguiente = *lista;
    *lista = nodo;
    return nodo;
}

4) INSERTAR AL FINAL DE LA LISTA
Nodo* insertarAlFinal(Nodo** lista, int dato){
    Nodo* nodo = (Nodo*)malloc(sizeof(Nodo));
    nodo->dato = dato;
    nodo->siguiente = NULL;
    Nodo* listaAux = *lista;
    while(listaAux != NULL && listaAux->siguiente != NULL){
        listaAux= listaAux->siguiente;
    }
    if(listaAux == NULL){
        *lista = nodo;
    } else {
        listaAux->siguiente = nodo;
    }
    return nodo;
}

5) INSERTAR ORDENADO EN LA LISTA

Nodo* insertarOrdenado(Nodo** lista, int dato){
    Nodo* nodo = (Nodo*)malloc(sizeof(Nodo));
    nodo->dato = dato;
    nodo->siguiente = NULL;
    Nodo* listaAux = *lista;
    Nodo* listaAnt = NULL;
    while(listaAux != NULL && dato < listaAux->dato){
        listaAnt = listaAux;
        listaAux = listaAux->siguiente;
    }
    if(listaAnt == NULL){
        *lista = nodo;
    }else{
        listaAnt->siguiente = nodo;
    }
    nodo->siguiente = listaAux;
    return nodo;
}

6) BUSCAR EN LA LISTA

Nodo* buscar(Nodo* lista, int buscado){
    Nodo* listaAux = lista;
    while(listaAux != NULL && listaAux->dato != buscado){
        listaAux = listaAux->siguiente;
    }
    return listaAux;
}

7) BORRA EL PRIMERO DE LA LISTA

int borrarPrimero(Nodo** lista){
    Nodo* listaAux = *lista;
    *lista = (*lista)->siguiente;
    int dato = listaAux->dato;
    free(listaAux);
    return dato;
}

8) BORRAR DE UN DATO EN PARTICULAR

int borrarDato(Nodo** lista, int dato){
    Nodo* listaAux = *lista;
    Nodo* listaAnt = NULL;
    while(listaAux != NULL && listaAux->dato != dato){
        listaAnt = listaAux;
        listaAux = listaAux->siguiente;
    }
    if(listaAnt == NULL){
        *lista = (*lista)->siguiente;
    }else {
        listaAnt->siguiente = listaAux->siguiente;
    }
    int valor = listaAux->dato;
    free(listaAux);
    return valor;
}

9) BORRA E IMPRIME LA LISTA

void borrarLista(NodoLista** lista){
    NodoLista* listaAux;
    while(*lista != NULL){
        listaAux = *lista;
        printf("%s\n", listaAux->palabra);
        *lista = (*lista)->siguiente;
        free(listaAux);
    }
}

10) ORDENA LA LISTA

void ordenarLista(Nodo** lista){
    Nodo* listaAux = NULL;
    int dato = 0;
    while(*lista != NULL){
        dato = borrarPrimero(lista);
        insertarOrdenado(&listaAux, dato);
    }
    *lista = listaAux;
}

11) INSERTAR SIN DUPLICADOS EN LA LISTA

Nodo* insertarSinDuplicados(Nodo** lista, int dato){
    Nodo* nodo = search(*lista, dato);
    if(nodo == NULL){
        nodo = insertarOrdenado(lista, dato);
    }
    return nodo;
}

12) INSERTAR EN POSICION INDICADA

Nodo* insertarEn(Nodo** lista, int dato, int posicion){
    Nodo* listaAux = *lista;
    Nodo* listaAnt = NULL;
    Nodo* nodo = (Nodo*)malloc(sizeof(Nodo));
    nodo->dato = dato;
    nodo->siguiente = NULL;
    for(int i = 0; i < posicion && *lista != NULL; i++){
        listaAnt = listaAux;
        listaAux = listaAux->siguiente;
    }
    if(listaAnt == NULL){
        *lista = nodo;
    } else {
        listaAnt->siguiente = nodo;
    }
    nodo->siguiente = listaAux;
    return nodo;
}

13) LEER UN DATO EN LA POSICION INDICADA

Nodo* insertarEn(Nodo** lista, int dato, int posicion){
    Nodo* listaAux = *lista;
    Nodo* listaAnt = NULL;
    Nodo* nodo = (Nodo*)malloc(sizeof(Nodo));
    nodo->dato = dato;
    nodo->siguiente = NULL;
    for(int i = 0; i < posicion && *lista != NULL; i++){
        listaAnt = listaAux;
        listaAux = listaAux->siguiente;
    }
    if(listaAnt == NULL){
        *lista = nodo;
    } else {
        listaAnt->siguiente = nodo;
    }
    nodo->siguiente = listaAux;
    return nodo;
}
